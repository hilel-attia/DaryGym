<?php

namespace App\Controller;


use App\Entity\Comment;
use App\Entity\User;

use App\Entity\Exercice;
use App\Entity\Exercicecategorie;
use App\Form\CommentType;

use App\Form\ExerciceType;
use App\Repository\ExerciceRepository;
use App\Repository\ExercicecategorieRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Knp\Component\Pager\PaginatorInterface ;
use Symfony\Component\HttpFoundation\Session\Session;
use Symfony\Component\Security\Core\Security;



/**
 * @Route("/exercice")
 */
class ExerciceController extends AbstractController
{
    /**
     * @Route("/", name="exercice_index", methods={"GET"})
     */
    public function index(Request $request , PaginatorInterface $paginator)
    {
        $donnees=$this->getDoctrine()->getRepository(Exercice::class)->findAll();
        $exercices= $paginator->paginate(
            $donnees,
            $request->query->getInt('page',1),
            4
        );

        return $this->render('exercice/index.html.twig',[
            'exercices'=>$exercices]);



    }

    /**
     * @Route("/new", name="exercice_new", methods={"GET", "POST"})
     */
    public function new(Request $request, EntityManagerInterface $entityManager): Response
    {
        $exercice = new Exercice();
        $form = $this->createForm(ExerciceType::class, $exercice);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $entityManager = $this->getDoctrine()->getManager();
           ## $file = $form->get('image')->getData();
            $file=$exercice->getImage();
            $file2=$exercice->getVideo();
            $file3=$exercice->getDocs();
            $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $filename2=$this->generateUniqueFileName().'.'.$file2->guessExtension();
            $filename3=$this->generateUniqueFileName().'.'.$file3->guessExtension();
            $file->move($this->getParameter('photos_directory'),$filename);
            $file2->move($this->getParameter('videos_directory'),$filename2);
            $file3->move($this->getParameter('documents_directory'),$filename3);
            $exercice->setImage($filename);
            $exercice->setVideo($filename2);
            $exercice->setDocs($filename3);

            $entityManager->persist($exercice);

            $entityManager->flush();

            return $this->redirectToRoute('exercice_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('exercice/new.html.twig', [
            'exercice' => $exercice,
            'form' => $form->createView(),
        ]);
    }
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/{id}", name="exercice_show", methods={"GET", "POST"})


     */
    public function show(Exercice $exercice,Request $request, EntityManagerInterface $entityManager): Response
    {


        $comment = New Comment();
        $comment->setPublishedat(new \DateTime('now'));
        $exercice->getId();


        $user=$this->getDoctrine()->getManager()->getRepository(User::class)->findAll();

        $comments=$this->getDoctrine()->getRepository(Comment::class)->findBy(array('exercice'=>$exercice));
        $form = $this->createFormBuilder($comment)
            ->add('content')





            ->getForm();

        $form->handleRequest($request);

        if($request->isMethod('post') && $form->isValid())
        {
            $currentUser = $this->container->get('security.token_storage')->getToken()->getUser();
            $comment->setUser($currentUser);

            $comment->setExercice($exercice);
            $em = $this->getDoctrine()->getManager();
            $em->persist($form->getData());
            $em->flush();

            return $this->redirectToRoute('exercice_show', ['id'=>$exercice->getId()], Response::HTTP_SEE_OTHER);
        }




        return $this->render('exercice/show.html.twig', [
            'exercice' => $exercice,
            'comments'=>$comments,
            'form' => $form->createView(),
            'user'=>$user

        ]);
    }

    public function indexAction(Security $security)
    {
        $user = $security->getUser();
    }
    /**
     * @Route("/{id}/edit", name="exercice_edit", methods={"GET", "POST"})
     */
    public function edit(Request $request, Exercice $exercice, EntityManagerInterface $entityManager): Response
    {
        $form = $this->createForm(ExerciceType::class, $exercice);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $file=$exercice->getImage();
            $file2=$exercice->getVideo();
            $file3=$exercice->getDocs();
            $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $filename2=$this->generateUniqueFileName().'.'.$file2->guessExtension();
            $filename3=$this->generateUniqueFileName().'.'.$file3->guessExtension();
            $file->move($this->getParameter('photos_directory'),$filename);
            $file2->move($this->getParameter('videos_directory'),$filename2);
            $file3->move($this->getParameter('documents_directory'),$filename3);
            $exercice->setImage($filename);
            $exercice->setVideo($filename2);
            $exercice->setDocs($filename3);

            $entityManager->persist($exercice);
            $entityManager->flush();


            return $this->redirectToRoute('exercice_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('exercice/edit.html.twig', [
            'exercice' => $exercice,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="exercice_delete", methods={"POST"})
     */
    public function delete(Request $request, Exercice $exercice, EntityManagerInterface $entityManager): Response
    {
        if ($this->isCsrfTokenValid('delete'.$exercice->getId(), $request->request->get('_token'))) {
            $entityManager->remove($exercice);
            $entityManager->flush();
        }

        return $this->redirectToRoute('exercice_index', [], Response::HTTP_SEE_OTHER);
    }

    /**
     * @Route("/front/enligne", name="enligne", methods={"GET"})
     */
   public function afficher()
    {

         $categories=$this->getDoctrine()->getRepository(Exercicecategorie::class)->findAll();

         $exercices=$this->getDoctrine()->getRepository(Exercice::class)->findBy(array('Exercicecategorie'=>$categories));

     return $this->render('front/enligne.html.twig',['exercices'=>$exercices,
                                                           'categories' =>$categories  ]);



   }
    /**
     * @Route("/exercice/recherche", name="recherche")
     */
    function Recherche(ExerciceRepository $repository,Request $request,PaginatorInterface $paginator){
        $data=$request->get('search');

      /* $exercices=$this->getDoctrine()->getRepository(Exercice::class)->findBy(['nom'=>$data] );*/
        $donnees=$this->getDoctrine()->getRepository(Exercice::class)->findBy(['nom'=>$data] );
        $exercices= $paginator->paginate(
            $donnees,
            $request->query->getInt('page',1),
            4
        );


        return $this->render('exercice/index.html.twig',
            ['exercices'=>$exercices]);
    }
    /**
     * @Route("/front/enligne/recherche", name="recherchefront")
     */
    function Recherchefront(ExerciceRepository $repository,Request $request){
        $data=$request->get('search');

        $categories=$this->getDoctrine()->getRepository(Exercicecategorie::class)->findAll();
        $exercices=$this->getDoctrine()->getRepository(Exercice::class)->findBy(['nom'=>$data] );


        return $this->render('front/enligne.html.twig',
            ['exercices'=>$exercices,
                'categories' =>$categories
                  ]);
    }
    /**
     * @Route("/{id}", name="exercice_comment", methods={"GET", "POST"})
     */
    public function showone()
    {
        $comment=new Comment();
            $formBuilder = $this->createFormBuilder($comment);
            $formBuilder
                ->add('content')
                ->add('publishedat')
                ->add('User')
                ->add('exercice')
            ;
            $form=$formBuilder->getForm();


        return $this->render('exercice/show.html.twig', [

            'comment'=>$comment,
            'form' => $form->createView(),
        ]);
    }
    /**
     * @Route("/search/back", name="exerciceajax", methods={"GET","POST"})
     */

    public function searchexerciceajax(Request $request ,ExerciceRepository $exerciceRepository ,PaginatorInterface $paginator ) :Response
    {
        $exerciceRepository = $this->getDoctrine()->getRepository(Exercice::class);
        $requestString=$request->get('searchValue');
        $donnees = $exerciceRepository->findOffrebyNom($requestString);

        $exercices= $paginator->paginate(
            $donnees,
            $request->query->getInt('page',1),
            4
        );

        return $this->render('exercice/index.html.twig', [
            "donnees "=>$donnees,
            "exercices"=>$exercices

        ]);
    }

    public function getRealEntities($entities){

        foreach ($entities as $entity){
            $realEntities[$entity->getId()] = $entity->getNom();
        }

        return $realEntities;
    }


}
